import argparse

import matplotlib.pyplot as plt
from matplotlib.axes import Axes
from matplotlib.figure import Figure

from vegapy.service import Service
from vegapy.plot.trades import (
    overlay_size,
    overlay_price,
    overlay_volume,
    overlay_maker_fee,
    overlay_liquidity_fee,
    overlay_infrastructure_fee,
)

# TODO: Tidy up the help formatter for the argument parser
PARSER = argparse.ArgumentParser()

# Service options
PARSER.add_argument(
    "-n",
    "--network",
    default="mainnet",
    help="Network to create service for. Specify testnet, stagnet, or mainnet.",
)
PARSER.add_argument(
    "-b",
    "--best",
    action="store_true",
    help="Whether to check all list API nodes for the lowest response time",
)
PARSER.add_argument(
    "-p",
    "--pages",
    type=int,
    default=None,
    help="Specify maximum number of pages paginated API requests will return.",
)

# Data options
PARSER.add_argument(
    "-m",
    "--market",
    nargs="+",
    default=["BTC"],
    help="Specify substrings to match against market codes.",
)

# Overlay options
PARSER.add_argument(
    "--size", action="store_true", help="Overlay price of trades on plot."
)
PARSER.add_argument(
    "--price", action="store_true", help="Overlay size of trades on plot."
)
PARSER.add_argument(
    "--volume", action="store_true", help="Overlay volume of trades on plot."
)
PARSER.add_argument(
    "--maker_fee",
    action="store_true",
    help="Overlay cumulative maker fees generated by trade on plot.",
)
PARSER.add_argument(
    "--liquidity_fee",
    action="store_true",
    help="Overlay cumulative liquidity fees generated by trades on plot.",
)
PARSER.add_argument(
    "--infrastructure_fee",
    action="store_true",
    help="Overlay cumulative infrastructure fees generated by trades on plot.",
)

if __name__ == "__main__":
    args = PARSER.parse_args()

    service = Service(args.network, find_best=args.best)

    # Get the market, asset, and trade data for the specified market
    market = service.utils.market.find_market(args.market)
    asset = service.utils.market.find_settlement_asset(args.market)
    trades = service.api.data.list_trades(
        market_ids=[market.id], max_pages=args.pages
    )

    fig: Figure
    axl: Axes
    axr: Axes

    fig, axl = plt.subplots(1, 1)
    axr = axl.twinx()

    if args.size:
        overlay_size(
            axr,
            trades=trades,
            size_decimals=market.position_decimal_places,
        )
    if args.price:
        overlay_price(
            axl,
            trades=trades,
            price_decimals=market.decimal_places,
        )
    if args.volume:
        overlay_volume(
            axl,
            trades=trades,
            price_decimals=market.decimal_places,
            size_decimals=market.position_decimal_places,
        )
    if args.maker_fee:
        overlay_maker_fee(
            axl,
            trades=trades,
            asset_decimals=asset.details.decimals,
            cumulative=True,
        )
    if args.liquidity_fee:
        overlay_liquidity_fee(
            axl,
            trades=trades,
            asset_decimals=asset.details.decimals,
            cumulative=True,
        )
    if args.infrastructure_fee:
        overlay_infrastructure_fee(
            axl,
            trades=trades,
            asset_decimals=asset.details.decimals,
            cumulative=True,
        )

    axl.set_title(
        f"Trade Data: {market.tradable_instrument.instrument.name}",
        loc="left",
    )
    axl.set_xlabel("datetime")
    axl.set_ylabel(asset.details.symbol)
    axr.set_ylabel("size")
    axl.legend(loc="upper left")
    axr.legend(loc="upper right")

    plt.show()
